#!/usr/bin/env python3
"""
üîß KthizaTrack Environment Setup Script
Helps configure environment variables for deployment
"""

import os
import json
import getpass
from pathlib import Path

def print_header():
    print("üîß KthizaTrack Environment Setup")
    print("=" * 40)
    print("This script helps you configure environment variables")
    print("for your KthizaTrack deployment.")
    print()

def setup_email_config():
    """Setup email configuration"""
    print("üìß Email Configuration Setup")
    print("-" * 30)
    
    use_email = input("Do you want to configure email verification? (y/n): ").lower().strip()
    
    if use_email != 'y':
        print("‚ÑπÔ∏è  Email verification will be disabled.")
        return {
            'SMTP_SERVER': '',
            'SMTP_PORT': '',
            'SMTP_USERNAME': '',
            'SMTP_PASSWORD': ''
        }
    
    print("\nüìß Email Provider Options:")
    print("1. Gmail (recommended)")
    print("2. Outlook")
    print("3. Yahoo")
    print("4. Custom")
    
    choice = input("Choose your email provider (1-4): ").strip()
    
    if choice == '1':  # Gmail
        smtp_server = "smtp.gmail.com"
        smtp_port = "587"
        print("\nüìß Gmail Setup Instructions:")
        print("1. Enable 2-factor authentication on your Gmail account")
        print("2. Go to Google Account settings ‚Üí Security ‚Üí 2-Step Verification")
        print("3. Generate an App Password for 'Mail'")
        print("4. Use the generated password below (not your regular Gmail password)")
        print()
        
    elif choice == '2':  # Outlook
        smtp_server = "smtp-mail.outlook.com"
        smtp_port = "587"
        
    elif choice == '3':  # Yahoo
        smtp_server = "smtp.mail.yahoo.com"
        smtp_port = "587"
        
    elif choice == '4':  # Custom
        smtp_server = input("Enter SMTP server: ").strip()
        smtp_port = input("Enter SMTP port (usually 587): ").strip()
        
    else:
        print("‚ùå Invalid choice. Using Gmail defaults.")
        smtp_server = "smtp.gmail.com"
        smtp_port = "587"
    
    smtp_username = input("Enter your email address: ").strip()
    smtp_password = getpass.getpass("Enter your email password/app password: ").strip()
    
    return {
        'SMTP_SERVER': smtp_server,
        'SMTP_PORT': smtp_port,
        'SMTP_USERNAME': smtp_username,
        'SMTP_PASSWORD': smtp_password
    }

def setup_google_vision():
    """Setup Google Vision API configuration"""
    print("\nü§ñ Google Vision API Setup")
    print("-" * 30)
    
    use_vision = input("Do you want to configure Google Vision API for AI food detection? (y/n): ").lower().strip()
    
    if use_vision != 'y':
        print("‚ÑπÔ∏è  Google Vision API will be disabled.")
        return {'GOOGLE_VISION_SERVICE_ACCOUNT_PATH': ''}
    
    print("\nü§ñ Google Vision API Setup Instructions:")
    print("1. Go to https://console.cloud.google.com")
    print("2. Create a new project or select existing one")
    print("3. Enable the Vision API")
    print("4. Create a service account")
    print("5. Download the JSON key file")
    print("6. Place the JSON file in your project directory")
    print()
    
    service_account_path = input("Enter the path to your service account JSON file: ").strip()
    
    if not os.path.exists(service_account_path):
        print(f"‚ö†Ô∏è  Warning: File not found at {service_account_path}")
        print("   Make sure to upload this file to your deployment platform.")
    
    return {'GOOGLE_VISION_SERVICE_ACCOUNT_PATH': service_account_path}

def setup_app_config():
    """Setup app configuration"""
    print("\nüåê App Configuration")
    print("-" * 30)
    
    # For local development
    local_url = input("Enter your local development URL (default: http://127.0.0.1:8000): ").strip()
    if not local_url:
        local_url = "http://127.0.0.1:8000"
    
    # For production (Render)
    print("\nüåê For Render Deployment:")
    print("Your app URL will be: https://your-app-name.onrender.com")
    print("Replace 'your-app-name' with your actual app name from Render")
    
    production_url = input("Enter your production URL (or press Enter to skip): ").strip()
    
    return {
        'APP_BASE_URL_LOCAL': local_url,
        'APP_BASE_URL': production_url if production_url else local_url
    }

def create_env_file(config):
    """Create .env file with configuration"""
    env_content = f"""# KthizaTrack Environment Configuration
# Generated by setup_env.py

# Database (SQLite for local development)
DATABASE_URL=sqlite:///./protein_app.db

# Email Configuration
SMTP_SERVER={config['SMTP_SERVER']}
SMTP_PORT={config['SMTP_PORT']}
SMTP_USERNAME={config['SMTP_USERNAME']}
SMTP_PASSWORD={config['SMTP_PASSWORD']}

# Google Vision API
GOOGLE_VISION_SERVICE_ACCOUNT_PATH={config['GOOGLE_VISION_SERVICE_ACCOUNT_PATH']}

# App Configuration
APP_BASE_URL={config['APP_BASE_URL']}
"""
    
    with open('.env', 'w') as f:
        f.write(env_content)
    
    print(f"\n‚úÖ Created .env file with your configuration")
    print("‚ö†Ô∏è  Remember: Never commit .env file to Git!")

def create_render_env_vars(config):
    """Create a file with Render environment variables"""
    render_vars = {
        'DATABASE_URL': 'postgresql://...',  # Render will provide this
        'APP_BASE_URL': config['APP_BASE_URL'],
        'SMTP_SERVER': config['SMTP_SERVER'],
        'SMTP_PORT': config['SMTP_PORT'],
        'SMTP_USERNAME': config['SMTP_USERNAME'],
        'SMTP_PASSWORD': config['SMTP_PASSWORD'],
        'GOOGLE_VISION_SERVICE_ACCOUNT_PATH': config['GOOGLE_VISION_SERVICE_ACCOUNT_PATH']
    }
    
    # Remove empty values
    render_vars = {k: v for k, v in render_vars.items() if v}
    
    with open('render_env_vars.txt', 'w') as f:
        f.write("# Render Environment Variables\n")
        f.write("# Copy these to your Render dashboard Environment tab\n\n")
        for key, value in render_vars.items():
            f.write(f"{key}={value}\n")
    
    print(f"\n‚úÖ Created render_env_vars.txt with Render environment variables")
    print("üìã Copy these variables to your Render dashboard Environment tab")

def main():
    print_header()
    
    # Check if .env already exists
    if os.path.exists('.env'):
        overwrite = input("‚ö†Ô∏è  .env file already exists. Overwrite? (y/n): ").lower().strip()
        if overwrite != 'y':
            print("‚ùå Setup cancelled.")
            return
    
    # Setup configurations
    email_config = setup_email_config()
    vision_config = setup_google_vision()
    app_config = setup_app_config()
    
    # Combine all configurations
    config = {**email_config, **vision_config, **app_config}
    
    # Create files
    create_env_file(config)
    create_render_env_vars(config)
    
    print("\nüéâ Setup Complete!")
    print("\nüìã Next Steps:")
    print("1. Test your app locally: python run.py")
    print("2. Deploy to Render using DEPLOYMENT.md guide")
    print("3. Add environment variables to Render dashboard")
    print("4. Your app will be live at your Render URL!")

if __name__ == "__main__":
    main()
